
package com.rns.bridge;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class RNSReactNativeBridgeModule extends ReactContextBaseJavaModule {

  private final ReactApplicationContext reactContext;

  private static final Object lock = new Object();
  private static volatile  RNSReactNativeBridgeModule module;
  private static final AtomicBoolean isReady = new AtomicBoolean(false);
  private static final Map<String, RNSReactNativeBridgeHandler> handers = Collections.synchronizedMap(new HashMap<String, RNSReactNativeBridgeHandler>());
  private static List<RNSReactNativeBirdgeEvent> pendingEvents = Collections.synchronizedList(new ArrayList<RNSReactNativeBirdgeEvent>());

  public RNSReactNativeBridgeModule(ReactApplicationContext reactContext) {
    super(reactContext);
    module = this;
    this.reactContext = reactContext;
  }

  public static void register(String type, RNSReactNativeBridgeHandler handler) {
      if (handler == null) {
          handers.remove(type);
      } else {
          handers.put(type, handler);
      }
  }

  public static void post(String type, Map<String, Object> data) {
      RNSReactNativeBirdgeEvent event = new RNSReactNativeBirdgeEvent(type, data);

      if (module == null || !isReady.get()) {
          pendingEvents.add(event);
          return;
      }
      module.handlePostEvent(event);
  }
  private void handlePostEvent(RNSReactNativeBirdgeEvent event) {
      this.getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
              .emit("NativeEvent", event.toWritableMap());
  }

    public void send(String type, ReadableMap data, Promise promise) {
      if (type.equals("BridgeInit")) {
         isReady.set(true);
         synchronized (lock) {
             for (int i = 0; i < pendingEvents.size(); i++) {
                 handlePostEvent(pendingEvents.get(i));
             }
             pendingEvents.clear();
         }
      }
      RNSReactNativeBridgeHandler handler = handers.get(type);
      if (handler != null && getCurrentActivity() != null) {
          handler.handle(getCurrentActivity(), data.toHashMap(), new RNSReactNativeBridgePromiseProxy(promise));
      } else {
          promise.resolve(null);
      }
    }


    @Override
    public String getName() {
        return "RNSReactNativeBridge";
    }
}