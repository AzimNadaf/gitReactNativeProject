package com.rns.bridge;

import android.nfc.Tag;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.WritableMap;

import java.util.List;
import java.util.Map;

class RNSReactNativeBridgePromiseProxy implements Promise {
    private Promise target;

    // this method is copied from com.facebook.react.bridge.Arguments where it's a private method
    static Object makeNativeObject(Object object) {
        if (object == null) {
            return null;
        } else if (object instanceof Float ||
                object instanceof Long ||
                object instanceof Byte ||
                object instanceof Short) {
            return new Double(((Number) object).doubleValue());
        } else if (object.getClass().isArray()) {
            return Arguments.makeNativeArray(object);
        } else if (object instanceof List) {
            return Arguments.makeNativeArray((List) object);
        } else if (object instanceof Map) {
            return Arguments.makeNativeMap((Map<String, Object>) object);
        } else if (object instanceof Bundle) {
            return Arguments.makeNativeMap((Bundle) object);
        } else {
            // Boolean, Integer, Double, String, WritableNativeArray, WritableNativeMap
            return object;
        }
    }

    public RNSReactNativeBridgePromiseProxy(Promise target) {
        this.target = target;
    }


    @Override
    public void resolve(@Nullable Object value) {
        target.resolve(makeNativeObject(value));
    }

    @Override
    public void reject(String code, String message) {
        target.reject(code, message);
    }

    @Override
    public void reject(String code, Throwable throwable) {
        target.reject(code, throwable);
    }

    @Override
    public void reject(String code, String message, Throwable throwable) {
        target.reject(code, message, throwable);
    }

    @Override
    public void reject(Throwable throwable) {
        target.reject(throwable);
    }

    @Override
    public void reject(Throwable throwable, WritableMap userInfo) {
        target.reject(throwable, userInfo);
    }

    @Override
    public void reject(String code, @NonNull WritableMap userInfo) {
        target.reject(code, userInfo);
    }

    @Override
    public void reject(String code, Throwable throwable, WritableMap userInfo) {
        target.reject(code, throwable, userInfo);
    }

    @Override
    public void reject(String code, String message, @NonNull WritableMap userInfo) {
        target.reject(code, message, userInfo);
    }

    @Override
    public void reject(String code, String message, Throwable throwable, WritableMap userInfo) {
        target.reject(code, message, throwable, userInfo);
    }

    @Override
    public void reject(String message) {
        target.reject(message);
    }
}
