
import { 
    Platform,
    NativeModules 
} from 'react-native';

const { RNSReactNativeBridge } = NativeModules;

const eventEmitter = Platform.OS === 'ios'
    ? /* ios */ new NativeEventEmitter(RNSReactNativeBridge)
    : /* android */ DeviceEventEmitter;

const handlerHolder = new Map(); 

const createRemover = (type, handler) => {
    const remove = () => {
        const handlers = handlersByType.get(type);
        if (!handlers) {
            return;
        }
        const index = handlers.indexOf(handler);
        if (index === -1) {
            return;
        }
        handlers.splice(index, 1);
    };
    return { remove };
};

// regist native event listener
const on = (type, handler) => {
    if (!handlerHolder.has(type)) {
        handlerHolder.set(type, []);
    }
    const remover = createRemover(type, handler);
    const handlers = handlersByType.get(type);
    if (!handlers) {
        return remover;
    }
    if (handlers.includes(handler)) {
        return remover;
    }
    handlers.push(handler);
    return remover;
}

// javascript send to native
const send = (type, data = {}) => reactNativeSocket.send(type, data);

eventEmitter.addListener('NativeEvent', (body) => {
    const { type, data } = body;
    const handlers = handlersByType.get(type);
    if (!handlers) {
        return;
    }
    handlers.forEach((handler) => handler(data));
});
    

const ReactNativeBridge = {
    send,
    on,
};
export default ReactNativeBridge;

